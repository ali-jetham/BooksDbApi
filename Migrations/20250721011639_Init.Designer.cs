// <auto-generated />
using System;
using System.Collections.Generic;
using LifeDbApi.Data;
using LifeDbApi.Models.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LifeDbApi.Migrations
{
    [DbContext(typeof(LifeDbContext))]
    [Migration("20250721011639_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "book_source", new[] { "goodreads", "google", "open_library" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "book_status", new[] { "abandoned", "paused", "read", "reading", "to_read" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "oauth_provider", new[] { "apple", "facebook", "google", "microsoft" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LifeDbApi.Models.Domain.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.PrimitiveCollection<List<string>>("Authors")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("authors");

                    b.Property<string>("CoverUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cover_url");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<byte>("Edition")
                        .HasColumnType("smallint")
                        .HasColumnName("edition");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_id");

                    b.PrimitiveCollection<List<string>>("Genre")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("genre");

                    b.Property<string>("Isbn10")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("isbn10");

                    b.Property<string>("Isbn13")
                        .IsRequired()
                        .HasColumnType("varchar(13)")
                        .HasColumnName("isbn13");

                    b.Property<int?>("PageCount")
                        .HasColumnType("integer")
                        .HasColumnName("page_count");

                    b.Property<DateOnly?>("PublicationDate")
                        .HasColumnType("date")
                        .HasColumnName("publication_date");

                    b.PrimitiveCollection<List<string>>("Publisher")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("publisher");

                    b.Property<string>("Series")
                        .HasColumnType("text")
                        .HasColumnName("series");

                    b.Property<BookSource>("Source")
                        .HasColumnType("book_source")
                        .HasColumnName("source");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_books");

                    b.ToTable("books", (string)null);
                });

            modelBuilder.Entity("LifeDbApi.Models.Domain.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_collections");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_collections_user_id");

                    b.ToTable("collections", (string)null);
                });

            modelBuilder.Entity("LifeDbApi.Models.Domain.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<bool>("Revoked")
                        .HasColumnType("boolean")
                        .HasColumnName("revoked");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token_hash");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("LifeDbApi.Models.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("email_verified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<OAuthProvider>("OAuthProvider")
                        .HasColumnType("oauth_provider")
                        .HasColumnName("o_auth_provider");

                    b.Property<string>("Sub")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("sub");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("LifeDbApi.Models.Domain.UserBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_id");

                    b.Property<DateOnly?>("DateAdded")
                        .HasColumnType("date")
                        .HasColumnName("date_added");

                    b.Property<DateOnly?>("DateFinished")
                        .HasColumnType("date")
                        .HasColumnName("date_finished");

                    b.Property<DateOnly?>("DateStarted")
                        .HasColumnType("date")
                        .HasColumnName("date_started");

                    b.Property<bool>("Favorite")
                        .HasColumnType("boolean")
                        .HasColumnName("favorite");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<BookStatus>("Status")
                        .HasColumnType("book_status")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_books");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_user_books_book_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_books_user_id");

                    b.ToTable("user_books", (string)null);
                });

            modelBuilder.Entity("LifeDbApi.Models.Domain.Collection", b =>
                {
                    b.HasOne("LifeDbApi.Models.Domain.User", "User")
                        .WithMany("Collections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_collections_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LifeDbApi.Models.Domain.RefreshToken", b =>
                {
                    b.HasOne("LifeDbApi.Models.Domain.User", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_id");
                });

            modelBuilder.Entity("LifeDbApi.Models.Domain.UserBook", b =>
                {
                    b.HasOne("LifeDbApi.Models.Domain.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_books_books_book_id");

                    b.HasOne("LifeDbApi.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_books_users_user_id");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LifeDbApi.Models.Domain.User", b =>
                {
                    b.Navigation("Collections");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
